{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/editor/app/utils/GhostSuggestion.ts"],"sourcesContent":["import { Extension } from \"@tiptap/core\";\r\nimport { Decoration, DecorationSet } from \"@tiptap/pm/view\";\r\nimport { Plugin, PluginKey } from \"prosemirror-state\";\r\nimport { keymap } from \"prosemirror-keymap\";\r\n\r\nexport const GhostSuggestion = Extension.create({\r\n  name: \"ghostSuggestion\",\r\n\r\n  addOptions() {\r\n    return {\r\n      suggestion: \"\",\r\n      onAcceptSuggestion: () => {}, // Callback to clear ghostText\r\n    };\r\n  },\r\n\r\n  addProseMirrorPlugins() {\r\n    const pluginKey = new PluginKey(\"ghostSuggestion\");\r\n\r\n    return [\r\n      // Plugin for rendering ghost suggestion decorations\r\n      new Plugin({\r\n        key: pluginKey,\r\n        props: {\r\n          decorations: (state) => {\r\n            const decorations: Decoration[] = [];\r\n            const { suggestion } = this.options;\r\n            if (!suggestion) return DecorationSet.empty;\r\n\r\n            const { from } = state.selection;\r\n\r\n            // Create a decoration to display the suggestion text\r\n            decorations.push(\r\n              Decoration.inline(from, from, {\r\n                nodeName: \"span\",\r\n                class: \"ghost-suggestion\",\r\n                style: \"color: #9ca3af; pointer-events: none;\",\r\n              }, {\r\n                text: suggestion,\r\n              })\r\n            );\r\n\r\n            return DecorationSet.create(state.doc, decorations);\r\n          },\r\n        },\r\n      }),\r\n      // Keymap plugin to handle Tab key for autocompletion\r\n      keymap({\r\n        Tab: (state, dispatch) => {\r\n          const { suggestion, onAcceptSuggestion } = this.options;\r\n          if (!suggestion) return false;\r\n\r\n          if (dispatch) {\r\n            const { from } = state.selection;\r\n            // Insert the suggestion text at the cursor position\r\n            dispatch(state.tr.insertText(suggestion, from));\r\n            // Call the callback to clear ghostText\r\n            onAcceptSuggestion();\r\n          }\r\n          return true; // Indicate the event was handled\r\n        },\r\n      }),\r\n    ];\r\n  },\r\n});"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEO,MAAM,kBAAkB,oJAAA,CAAA,YAAS,CAAC,MAAM,CAAC;IAC9C,MAAM;IAEN;QACE,OAAO;YACL,YAAY;YACZ,oBAAoB,KAAO;QAC7B;IACF;IAEA;QACE,MAAM,YAAY,IAAI,wJAAA,CAAA,YAAS,CAAC;QAEhC,OAAO;YACL,oDAAoD;YACpD,IAAI,wJAAA,CAAA,SAAM,CAAC;gBACT,KAAK;gBACL,OAAO;oBACL,aAAa,CAAC;wBACZ,MAAM,cAA4B,EAAE;wBACpC,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,OAAO;wBACnC,IAAI,CAAC,YAAY,OAAO,uJAAA,CAAA,gBAAa,CAAC,KAAK;wBAE3C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS;wBAEhC,qDAAqD;wBACrD,YAAY,IAAI,CACd,uJAAA,CAAA,aAAU,CAAC,MAAM,CAAC,MAAM,MAAM;4BAC5B,UAAU;4BACV,OAAO;4BACP,OAAO;wBACT,GAAG;4BACD,MAAM;wBACR;wBAGF,OAAO,uJAAA,CAAA,gBAAa,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE;oBACzC;gBACF;YACF;YACA,qDAAqD;YACrD,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE;gBACL,KAAK,CAAC,OAAO;oBACX,MAAM,EAAE,UAAU,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,OAAO;oBACvD,IAAI,CAAC,YAAY,OAAO;oBAExB,IAAI,UAAU;wBACZ,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS;wBAChC,oDAAoD;wBACpD,SAAS,MAAM,EAAE,CAAC,UAAU,CAAC,YAAY;wBACzC,uCAAuC;wBACvC;oBACF;oBACA,OAAO,MAAM,iCAAiC;gBAChD;YACF;SACD;IACH;AACF","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///D:/editor/components/TipTap.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEditor, EditorContent } from \"@tiptap/react\";\r\nimport StarterKit from \"@tiptap/starter-kit\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"@/app/context/AuthContext\";\r\nimport { GhostSuggestion } from \"@/app/utils/GhostSuggestion\";\r\n\r\nconst Tiptap = () => {\r\n  const [ghostText, setGhostText] = useState(\"\");\r\n  const [caretPosition, setCaretPosition] = useState({ top: 0, left: 0 });\r\n  const { token } = useAuth();\r\n  const [suggestions, setSuggestions] = useState<string[]>([]);\r\n  const [lastQuery, setLastQuery] = useState<string>(\"\");\r\n\r\n  const editor = useEditor({\r\n    extensions: [\r\n      StarterKit,\r\n      GhostSuggestion.configure({\r\n        suggestion: ghostText,\r\n        onAcceptSuggestion: () => setGhostText(\"\"), // Clear ghostText on Tab\r\n      }),\r\n    ],\r\n    content: \"\",\r\n    onUpdate: ({ editor }) => {\r\n      const text = editor.getText().trim();\r\n      const words = text.split(/\\s+/);\r\n      const lastWord = words.at(-1) ?? \"\";\r\n\r\n      // Update caret position\r\n      const { from } = editor.state.selection;\r\n      const coords = editor.view.coordsAtPos(from);\r\n      const editorElement = editor.view.dom.getBoundingClientRect();\r\n      setCaretPosition({\r\n        top: coords.top - editorElement.top + 20,\r\n        left: coords.left - editorElement.left,\r\n      });\r\n\r\n      // Fetch suggestions for the last word\r\n      if (lastWord.length > 0 && lastWord !== lastQuery) {\r\n        setLastQuery(lastWord);\r\n        fetchSuggestions(lastWord);\r\n      } else if (lastWord.length === 0) {\r\n        setSuggestions([]);\r\n        setGhostText(\"\");\r\n      }\r\n    },\r\n  });\r\n\r\n  // Update editor with new ghostText\r\n  useEffect(() => {\r\n    if (editor) {\r\n      editor.setOptions({\r\n        extensions: [\r\n          StarterKit,\r\n          GhostSuggestion.configure({\r\n            suggestion: ghostText,\r\n            onAcceptSuggestion: () => setGhostText(\"\"),\r\n          }),\r\n        ],\r\n      });\r\n    }\r\n  }, [ghostText, editor]);\r\n\r\n  // Update ghostText when suggestions change\r\n  useEffect(() => {\r\n    if (suggestions.length > 0) {\r\n      setGhostText(suggestions[0]);\r\n    } else {\r\n      setGhostText(\"\");\r\n    }\r\n  }, [suggestions]);\r\n\r\n  const fetchSuggestions = async (query: string) => {\r\n    if (!token) return;\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/autocomplete?query=${query}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (res.ok) {\r\n        const data = await res.json();\r\n        setSuggestions(data.suggestions || []);\r\n      } else {\r\n        setSuggestions([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Autocomplete fetch error:\", err);\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <EditorContent editor={editor} className=\"border p-2 rounded min-h-[200px]\" />\r\n      {ghostText && (\r\n        <div\r\n          className=\"pointer-events-none absolute text-gray-400\"\r\n          style={{\r\n            top: caretPosition.top,\r\n            left: caretPosition.left,\r\n          }}\r\n        >\r\n          {ghostText}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tiptap;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///D:/editor/app/page.tsx"],"sourcesContent":["'use client'\n\nimport Tiptap from \"../components/TipTap\";\nimport { useAuth } from \"./context/AuthContext\";\n\nexport default function Home() {\n\n  const { user, token, loading } = useAuth();\n  \n  return (\n    <div className=\"bg-white\">\n      {\n        user ? (\n          <div className=\"p-6 max-w-md mx-auto\">\n            <h1 className=\"text-2xl font-bold mb-4\">Welcome, {user.email}</h1>\n            <div className=\"border\">\n              <Tiptap />\n            </div>\n          </div>\n        ) : (\n          <div className=\"p-6 max-w-md mx-auto\">\n            <h1 className=\"text-2xl font-bold mb-4\">Please log in to continue</h1>\n            <p className=\"text-gray-600\">You can access the editor once you are logged in.</p>\n            <button onClick={() => window.location.href = \"/login\"} className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\" > Login </button>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKe,SAAS;;IAEtB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEvC,qBACE,6LAAC;QAAI,WAAU;kBAEX,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;;wBAA0B;wBAAU,KAAK,KAAK;;;;;;;8BAC5D,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC,wHAAA,CAAA,UAAM;;;;;;;;;;;;;;;iCAIX,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;8BAA0B;;;;;;8BACxC,6LAAC;oBAAE,WAAU;8BAAgB;;;;;;8BAC7B,6LAAC;oBAAO,SAAS,IAAM,OAAO,QAAQ,CAAC,IAAI,GAAG;oBAAU,WAAU;8BAAiD;;;;;;;;;;;;;;;;;AAM/H;GAxBwB;;QAEW,iIAAA,CAAA,UAAO;;;KAFlB","debugId":null}}]
}