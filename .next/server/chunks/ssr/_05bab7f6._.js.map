{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/editor/components/TipTap.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEditor, EditorContent } from \"@tiptap/react\";\r\nimport StarterKit from \"@tiptap/starter-kit\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"@/app/context/AuthContext\";\r\nimport { Extension } from '@tiptap/core';\r\n\r\nconst GhostTextExtension = Extension.create({\r\n  name: 'ghostText',\r\n  \r\n  addProseMirrorPlugins() {\r\n    return [];\r\n  },\r\n});\r\n\r\nconst Tiptap = () => {\r\n  const { token } = useAuth();\r\n  const [ghostText, setGhostText] = useState<string>(\"\");\r\n  const [lastQuery, setLastQuery] = useState<string>(\"\");\r\n  const [currentSuggestion, setCurrentSuggestion] = useState<string>(\"\");\r\n\r\n  const editor = useEditor({\r\n    extensions: [StarterKit, GhostTextExtension],\r\n    content: \"<p>Start typing...</p>\",\r\n    onUpdate({ editor }) {\r\n      const text = editor.getText().trim();\r\n      const words = text.split(/\\s+/);\r\n      const lastWord = words[words.length - 1];\r\n\r\n      // Fetch suggestions on every keystroke if the last word has changed\r\n      if (lastWord !== lastQuery) {\r\n        setLastQuery(lastWord);\r\n        if (lastWord && lastWord.length > 0) {\r\n          fetchSuggestions(lastWord);\r\n        } else {\r\n          setGhostText(\"\");\r\n          setCurrentSuggestion(\"\");\r\n        }\r\n      }\r\n    },\r\n    editorProps: {\r\n      handleKeyDown: (view, event) => {\r\n        // Handle Tab key for autocomplete\r\n        if (event.key === \"Tab\" && currentSuggestion) {\r\n          event.preventDefault();\r\n          insertGhostText();\r\n          return true;\r\n        }\r\n\r\n        // Handle Right Arrow key for autocomplete (like VS Code)\r\n        if (event.key === \"ArrowRight\" && currentSuggestion) {\r\n          const { selection } = editor.state;\r\n          const { from, to } = selection;\r\n          \r\n          // Only accept if cursor is at the end of current text\r\n          if (from === to && from === editor.state.doc.content.size - 1) {\r\n            event.preventDefault();\r\n            insertGhostText();\r\n            return true;\r\n          }\r\n        }\r\n\r\n        // Clear ghost text on most other keys\r\n        if (![\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"Shift\", \"Control\", \"Alt\", \"Meta\"].includes(event.key)) {\r\n          if (event.key !== \"ArrowRight\" && event.key !== \"Tab\") {\r\n            // Small delay to let the text update first\r\n            setTimeout(() => {\r\n              const text = editor.getText().trim();\r\n              const words = text.split(/\\s+/);\r\n              const lastWord = words[words.length - 1];\r\n              if (lastWord !== lastQuery) {\r\n                setGhostText(\"\");\r\n              }\r\n            }, 10);\r\n          }\r\n        }\r\n\r\n        return false;\r\n      },\r\n    },\r\n  });\r\n\r\n  const fetchSuggestions = async (query: string) => {\r\n    if (!token || !query.trim()) {\r\n      setGhostText(\"\");\r\n      setCurrentSuggestion(\"\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/autocomplete?query=${encodeURIComponent(query)}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (res.ok) {\r\n        const data = await res.json();\r\n        const suggestions = data.suggestions || [];\r\n        \r\n        if (suggestions.length > 0) {\r\n          const firstSuggestion = suggestions[0];\r\n          // Only show ghost text if the suggestion starts with the current query\r\n          if (firstSuggestion.toLowerCase().startsWith(query.toLowerCase())) {\r\n            const remainingText = firstSuggestion.slice(query.length);\r\n            setGhostText(remainingText);\r\n            setCurrentSuggestion(firstSuggestion);\r\n          } else {\r\n            setGhostText(\"\");\r\n            setCurrentSuggestion(\"\");\r\n          }\r\n        } else {\r\n          setGhostText(\"\");\r\n          setCurrentSuggestion(\"\");\r\n        }\r\n      } else {\r\n        setGhostText(\"\");\r\n        setCurrentSuggestion(\"\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Autocomplete fetch error:\", err);\r\n      setGhostText(\"\");\r\n      setCurrentSuggestion(\"\");\r\n    }\r\n  };\r\n\r\n  const insertGhostText = () => {\r\n    if (!editor || !currentSuggestion) return;\r\n\r\n    const { selection } = editor.state;\r\n    const { from } = selection;\r\n    const text = editor.state.doc.textBetween(0, from);\r\n\r\n    // Find the start of the current word\r\n    const words = text.split(/\\s+/);\r\n    const currentWord = words[words.length - 1];\r\n    const wordStart = from - currentWord.length;\r\n\r\n    // Replace the current word with the full suggestion\r\n    editor\r\n      .chain()\r\n      .focus()\r\n      .deleteRange({ from: wordStart, to: from })\r\n      .insertContent(currentSuggestion + \" \")\r\n      .run();\r\n\r\n    // Clear ghost text after insertion\r\n    setGhostText(\"\");\r\n    setCurrentSuggestion(\"\");\r\n    setLastQuery(\"\");\r\n  };\r\n\r\n  // Get cursor position for ghost text positioning\r\n  const getCursorPosition = () => {\r\n    if (!editor) return { top: 0, left: 0 };\r\n\r\n    try {\r\n      const { selection } = editor.state;\r\n      const { from } = selection;\r\n      const coords = editor.view.coordsAtPos(from);\r\n      const editorRect = editor.view.dom.getBoundingClientRect();\r\n\r\n      return {\r\n        top: coords.top - editorRect.top,\r\n        left: coords.left - editorRect.left,\r\n      };\r\n    } catch (error) {\r\n      return { top: 0, left: 0 };\r\n    }\r\n  };\r\n\r\n  const cursorPosition = editor ? getCursorPosition() : { top: 0, left: 0 };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <div className=\"mb-2 space-x-2\">\r\n        <button\r\n          onClick={() => editor?.chain().focus().toggleBold().run()}\r\n          className={`px-2 py-1 border rounded ${editor?.isActive(\"bold\") ? \"bg-blue-500 text-white\" : \"bg-white\"}`}\r\n        >\r\n          Bold\r\n        </button>\r\n        <button\r\n          onClick={() => editor?.chain().focus().toggleItalic().run()}\r\n          className={`px-2 py-1 border rounded ${editor?.isActive(\"italic\") ? \"bg-blue-500 text-white\" : \"bg-white\"}`}\r\n        >\r\n          Italic\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"relative\">\r\n        <EditorContent\r\n          editor={editor}\r\n          className=\"border p-2 rounded min-h-[200px] focus-within:border-blue-500\"\r\n        />\r\n        \r\n        {/* Ghost text overlay */}\r\n        {ghostText && (\r\n          <div\r\n            className=\"absolute pointer-events-none text-gray-400 font-mono\"\r\n            style={{\r\n              top: `${cursorPosition.top + 8}px`, // 8px padding offset\r\n              left: `${cursorPosition.left + 8}px`, // 8px padding offset\r\n              fontSize: '14px',\r\n              lineHeight: '1.5',\r\n              zIndex: 10,\r\n            }}\r\n          >\r\n            {ghostText}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Instructions */}\r\n      {currentSuggestion && (\r\n        <div className=\"mt-2 text-xs text-gray-500\">\r\n          Press <kbd className=\"px-1 py-0.5 bg-gray-100 rounded text-xs\">Tab</kbd> or <kbd className=\"px-1 py-0.5 bg-gray-100 rounded text-xs\">â†’</kbd> to accept \"{currentSuggestion}\"\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tiptap;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///D:/editor/app/page.tsx"],"sourcesContent":["'use client'\n\nimport Tiptap from \"../components/TipTap\";\nimport { useAuth } from \"./context/AuthContext\";\n\nexport default function Home() {\n\n  const { user, token, loading } = useAuth();\n  \n  return (\n    <div className=\"bg-white\">\n      {\n        user ? (\n          <div className=\"p-6 max-w-md mx-auto\">\n            <h1 className=\"text-2xl font-bold mb-4\">Welcome, {user.email}</h1>\n            <div className=\"border\">\n              <Tiptap />\n            </div>\n          </div>\n        ) : (\n          <div className=\"p-6 max-w-md mx-auto\">\n            <h1 className=\"text-2xl font-bold mb-4\">Please log in to continue</h1>\n            <p className=\"text-gray-600\">You can access the editor once you are logged in.</p>\n            <button onClick={() => window.location.href = \"/login\"} className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\" > Login </button>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IAEtB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,8HAAA,CAAA,UAAO,AAAD;IAEvC,qBACE,8OAAC;QAAI,WAAU;kBAEX,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;;wBAA0B;wBAAU,KAAK,KAAK;;;;;;;8BAC5D,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,qHAAA,CAAA,UAAM;;;;;;;;;;;;;;;iCAIX,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAA0B;;;;;;8BACxC,8OAAC;oBAAE,WAAU;8BAAgB;;;;;;8BAC7B,8OAAC;oBAAO,SAAS,IAAM,OAAO,QAAQ,CAAC,IAAI,GAAG;oBAAU,WAAU;8BAAiD;;;;;;;;;;;;;;;;;AAM/H","debugId":null}}]
}